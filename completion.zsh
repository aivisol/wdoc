# bash completion support for -m
# DO NOT EDIT.
# This script is autogenerated by fire/completion.py.

_complete--m()
{
  local cur prev opts lastcommand
  COMPREPLY=()
  prev="${COMP_WORDS[COMP_CWORD-1]}"
  cur="${COMP_WORDS[COMP_CWORD]}"
  lastcommand=$(get_lastcommand)

  opts=""
  GLOBAL_OPTIONS=""


  case "${lastcommand}" in
  
    -m)
      
      opts=" ${GLOBAL_OPTIONS}" 
      opts=$(filter_options $opts)
    ;;
  esac

  COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
  return 0
}

get_lastcommand()
{
  local lastcommand i

  lastcommand=
  for ((i=0; i < ${#COMP_WORDS[@]}; ++i)); do
    if [[ ${COMP_WORDS[i]} != -* ]] && [[ -n ${COMP_WORDS[i]} ]] && [[
      ${COMP_WORDS[i]} != $cur ]]; then
      lastcommand=${COMP_WORDS[i]}
    fi
  done

  echo $lastcommand
}

filter_options()
{
  local opts
  opts=""
  for opt in "$@"
  do
    if ! option_already_entered $opt; then
      opts="$opts $opt"
    fi
  done

  echo $opts
}

option_already_entered()
{
  local opt
  for opt in ${COMP_WORDS[@]:0:$COMP_CWORD}
  do
    if [ $1 == $opt ]; then
      return 0
    fi
  done
  return 1
}

is_prev_global()
{
  local opt
  for opt in $GLOBAL_OPTIONS
  do
    if [ $opt == $prev ]; then
      return 0
    fi
  done
  return 1
}

complete -F _complete--m -m

# bash completion support for __main__.py
# DO NOT EDIT.
# This script is autogenerated by fire/completion.py.

_complete-__main__py()
{
  local cur prev opts lastcommand
  COMPREPLY=()
  prev="${COMP_WORDS[COMP_CWORD-1]}"
  cur="${COMP_WORDS[COMP_CWORD]}"
  lastcommand=$(get_lastcommand)

  opts=""
  GLOBAL_OPTIONS="--no-llm-cache --query-eval-modelname --notification-callback --file-loader-parallel-backend --llms-api-bases --query-condense-question --embed-kwargs --llm-verbosity --dollar-limit --save-embeds-as --modelname --import-mode --embed-model --query-relevancy --query-retrievers --query-eval-check-number --chat-memory --private --top-k --summary-language --query --debug --task --load-embeds-from --filetype --summary-n-recursion --DIY-rolling-window-embedding"


  case "${lastcommand}" in
  
    capitalize)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="--self ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    ljust)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="--fillchar --self --width ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    path)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="capitalize casefold center count encode endswith expandtabs find format format-map index isalnum isalpha isascii isdecimal isdigit isidentifier islower isnumeric isprintable isspace istitle isupper join ljust lower lstrip maketrans partition removeprefix removesuffix replace rfind rindex rjust rpartition rsplit rstrip split splitlines startswith strip swapcase title translate upper zfill ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    strip)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="--chars --self ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    replace)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="--count --new --old --self ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    filter-metadata)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="copy-with ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    isprintable)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="--self ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    anki-deck)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="capitalize casefold center count encode endswith expandtabs find format format-map index isalnum isalpha isascii isdecimal isdigit isidentifier islower isnumeric isprintable isspace istitle isupper join ljust lower lstrip maketrans partition removeprefix removesuffix replace rfind rindex rjust rpartition rsplit rstrip split splitlines startswith strip swapcase title translate upper zfill ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    exclude)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="capitalize casefold center count encode endswith expandtabs find format format-map index isalnum isalpha isascii isdecimal isdigit isidentifier islower isnumeric isprintable isspace istitle isupper join ljust lower lstrip maketrans partition removeprefix removesuffix replace rfind rindex rjust rpartition rsplit rstrip split splitlines startswith strip swapcase title translate upper zfill ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    upper)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="--self ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    zfill)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="--self --width ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    removesuffix)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="--self --suffix ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    prepare-query-task)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="--self ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    isnumeric)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="--self ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    source-tag)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="capitalize casefold center count encode endswith expandtabs find format format-map index isalnum isalpha isascii isdecimal isdigit isidentifier islower isnumeric isprintable isspace istitle isupper join ljust lower lstrip maketrans partition removeprefix removesuffix replace rfind rindex rjust rpartition rsplit rstrip split splitlines startswith strip swapcase title translate upper zfill ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    title)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="--self ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    rstrip)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="--chars --self ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    file-loader-n-jobs)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="as-integer-ratio bit-length conjugate denominator from-bytes imag numerator real to-bytes ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    lstrip)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="--chars --self ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    out-file)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="capitalize casefold center count encode endswith expandtabs find format format-map index isalnum isalpha isascii isdecimal isdigit isidentifier islower isnumeric isprintable isspace istitle isupper join ljust lower lstrip maketrans partition removeprefix removesuffix replace rfind rindex rjust rpartition rsplit rstrip split splitlines startswith strip swapcase title translate upper zfill ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    rsplit)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="--maxsplit --self --sep ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    to-bytes)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="--byteorder --length --self --signed ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    isupper)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="--self ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    anki-profile)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="capitalize casefold center count encode endswith expandtabs find format format-map index isalnum isalpha isascii isdecimal isdigit isidentifier islower isnumeric isprintable isspace istitle isupper join ljust lower lstrip maketrans partition removeprefix removesuffix replace rfind rindex rjust rpartition rsplit rstrip split splitlines startswith strip swapcase title translate upper zfill ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    center)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="--fillchar --self --width ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    extra-args-keys)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="anki-deck anki-fields anki-mode anki-notetype anki-profile embed-instruct exclude file-loader-n-jobs filter-content filter-metadata include load-functions out-file path source-tag whisper-lang whisper-prompt youtube-language youtube-translation ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    isidentifier)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="--self ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    from-bytes)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="--byteorder --bytes --signed ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    youtube-translation)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="capitalize casefold center count encode endswith expandtabs find format format-map index isalnum isalpha isascii isdecimal isdigit isidentifier islower isnumeric isprintable isspace istitle isupper join ljust lower lstrip maketrans partition removeprefix removesuffix replace rfind rindex rjust rpartition rsplit rstrip split splitlines startswith strip swapcase title translate upper zfill ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    isdecimal)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="--self ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    partition)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="--self --sep ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    translate)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="--self --table ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    __main__.py)
      
      opts="VERSION extra-args-keys prepare-query-task ${GLOBAL_OPTIONS}" 
      opts=$(filter_options $opts)
    ;;

    copy-with)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="--params ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    include)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="capitalize casefold center count encode endswith expandtabs find format format-map index isalnum isalpha isascii isdecimal isdigit isidentifier islower isnumeric isprintable isspace istitle isupper join ljust lower lstrip maketrans partition removeprefix removesuffix replace rfind rindex rjust rpartition rsplit rstrip split splitlines startswith strip swapcase title translate upper zfill ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    istitle)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="--self ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    bit-length)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="--self ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    isalnum)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="--self ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    anki-notetype)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="capitalize casefold center count encode endswith expandtabs find format format-map index isalnum isalpha isascii isdecimal isdigit isidentifier islower isnumeric isprintable isspace istitle isupper join ljust lower lstrip maketrans partition removeprefix removesuffix replace rfind rindex rjust rpartition rsplit rstrip split splitlines startswith strip swapcase title translate upper zfill ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    casefold)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="--self ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    as-integer-ratio)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="--self ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    VERSION)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="capitalize casefold center count encode endswith expandtabs find format format-map index isalnum isalpha isascii isdecimal isdigit isidentifier islower isnumeric isprintable isspace istitle isupper join ljust lower lstrip maketrans partition removeprefix removesuffix replace rfind rindex rjust rpartition rsplit rstrip split splitlines startswith strip swapcase title translate upper zfill ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    join)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="--iterable --self ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    load-functions)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="copy-with ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    whisper-lang)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="capitalize casefold center count encode endswith expandtabs find format format-map index isalnum isalpha isascii isdecimal isdigit isidentifier islower isnumeric isprintable isspace istitle isupper join ljust lower lstrip maketrans partition removeprefix removesuffix replace rfind rindex rjust rpartition rsplit rstrip split splitlines startswith strip swapcase title translate upper zfill ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    swapcase)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="--self ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    isdigit)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="--self ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    split)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="--maxsplit --self --sep ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    isascii)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="--self ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    rjust)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="--fillchar --self --width ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    filter-content)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="copy-with ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    whisper-prompt)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="capitalize casefold center count encode endswith expandtabs find format format-map index isalnum isalpha isascii isdecimal isdigit isidentifier islower isnumeric isprintable isspace istitle isupper join ljust lower lstrip maketrans partition removeprefix removesuffix replace rfind rindex rjust rpartition rsplit rstrip split splitlines startswith strip swapcase title translate upper zfill ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    anki-mode)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="capitalize casefold center count encode endswith expandtabs find format format-map index isalnum isalpha isascii isdecimal isdigit isidentifier islower isnumeric isprintable isspace istitle isupper join ljust lower lstrip maketrans partition removeprefix removesuffix replace rfind rindex rjust rpartition rsplit rstrip split splitlines startswith strip swapcase title translate upper zfill ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    rpartition)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="--self --sep ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    lower)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="--self ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    encode)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="--encoding --errors --self ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    anki-fields)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="capitalize casefold center count encode endswith expandtabs find format format-map index isalnum isalpha isascii isdecimal isdigit isidentifier islower isnumeric isprintable isspace istitle isupper join ljust lower lstrip maketrans partition removeprefix removesuffix replace rfind rindex rjust rpartition rsplit rstrip split splitlines startswith strip swapcase title translate upper zfill ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    isalpha)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="--self ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    removeprefix)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="--prefix --self ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    youtube-language)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="capitalize casefold center count encode endswith expandtabs find format format-map index isalnum isalpha isascii isdecimal isdigit isidentifier islower isnumeric isprintable isspace istitle isupper join ljust lower lstrip maketrans partition removeprefix removesuffix replace rfind rindex rjust rpartition rsplit rstrip split splitlines startswith strip swapcase title translate upper zfill ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    embed-instruct)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="capitalize casefold center count encode endswith expandtabs find format format-map index isalnum isalpha isascii isdecimal isdigit isidentifier islower isnumeric isprintable isspace istitle isupper join ljust lower lstrip maketrans partition removeprefix removesuffix replace rfind rindex rjust rpartition rsplit rstrip split splitlines startswith strip swapcase title translate upper zfill ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    expandtabs)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="--self --tabsize ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    isspace)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="--self ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    splitlines)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="--keepends --self ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;

    islower)
      
      if is_prev_global; then
        opts="${GLOBAL_OPTIONS}"
      else
        opts="--self ${GLOBAL_OPTIONS}"
      fi
      opts=$(filter_options $opts)
    ;;
  esac

  COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
  return 0
}

get_lastcommand()
{
  local lastcommand i

  lastcommand=
  for ((i=0; i < ${#COMP_WORDS[@]}; ++i)); do
    if [[ ${COMP_WORDS[i]} != -* ]] && [[ -n ${COMP_WORDS[i]} ]] && [[
      ${COMP_WORDS[i]} != $cur ]]; then
      lastcommand=${COMP_WORDS[i]}
    fi
  done

  echo $lastcommand
}

filter_options()
{
  local opts
  opts=""
  for opt in "$@"
  do
    if ! option_already_entered $opt; then
      opts="$opts $opt"
    fi
  done

  echo $opts
}

option_already_entered()
{
  local opt
  for opt in ${COMP_WORDS[@]:0:$COMP_CWORD}
  do
    if [ $1 == $opt ]; then
      return 0
    fi
  done
  return 1
}

is_prev_global()
{
  local opt
  for opt in $GLOBAL_OPTIONS
  do
    if [ $opt == $prev ]; then
      return 0
    fi
  done
  return 1
}

complete -F _complete-__main__py __main__.py

